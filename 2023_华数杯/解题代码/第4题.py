def KS(c,RYB,n):#n与波长线性相关，函数根据颜料浓度获得K/S值
    CC = [[[0.002050922,-0.010625345,-0.031359510,0.181793732,0.631014491,0.612139468], 
[-0.012673833,0.161986091,-0.705964080,1.160045911,0.191245534,0.249395544],
[-0.012673833,0.161986091,-0.705964080,1.160045911,0.162745534,0.130041416],
[-0.006336917,0.080993045,-0.352982040,0.580022956,0.382850767, 0.164430477],
[-0.006336917,0.080993045,-0.352982040,0.580022955,0.833351767,0.214508983],
[-0.006336917,0.080993045,-0.352982040,0.580022955,1.429894767,0.277174513],
[-0.006336917,0.080993045,-0.352982040,0.580022955,2.229894767,0.343731230],
[-0.006336917,0.080993045,-0.352982040,0.580022955,2.429894767,0.319348659],
[-0.006336917,0.080993045,-0.352982040,0.580022955,2.329894767,0.363999377],
[-0.005484181,0.069501135,-0.300351227,0.488841697,0.878255582,0.031300873],
[-0.005609783,0.068259047,-0.282375262,0.447774101,0.027184197,0.017193746],
[-0.000131968,0.001687640,-0.007425131,0.012294641,0.045175614,0.008160975],
[0.000019680,-0.000212664,0.000685743,-0.000579728,0.009633221,0.006700718],
[-0.000023554,0.000292210,-0.001248520,0.002107284,0.003789219,0.005229909],
[-0.000011018,0.000147067,-0.000710054,0.001341692,0.001148242,0.006499160],
[-0.000011018,0.000147067,-0.000710054,0.001341692,0.000148242,0.006200485]],
[[-0.003816786,0.041304601,-0.151455467,0.217371645,1.499479885,0.483956218],
[-0.003816786,0.041304601,-0.151455467,0.217371645,1.599479885,0.494269247],
[-0.003816786,0.041304601,-0.151455467,0.217371645,1.799479885,0.484631382],
[-0.003816786,0.041304601,-0.151455467,0.217371645,1.609479885,0.418500018],
[-0.003816786,0.041304601,-0.151455467,0.217371645,1.199479885,0.322495621],
[-0.002641377,0.028986234,-0.108313381,0.158117459,0.776735461,0.207159495],
[-0.002641377,0.028986234,-0.108313381,0.158117459,0.326735461,0.107696213],
[-0.000272428,0.002981395,-0.011089722,0.016092127,0.142663106,0.047312162],
[-0.000230533,0.002447709,-0.008707714,0.011758987,0.055330119,0.023341934],
[-0.000863814,0.009847672,-0.038712749,0.062081749,-0.011644882,0.013055461],
[-0.000017512,0.000177453,-0.000593616,0.000747980,0.006688451,0.004630458],
[-0.000011655,0.000121480,-0.000409439,0.000505258,0.001997396,0.002436516],
[-0.000003077,0.000032802,-0.000113561,0.000138511,0.000958537,0.002010520],
[-0.000003077,0.000032802,-0.000113561,0.000138511,0.000558537,0.001768612],
[-0.000003077,0.000032802,-0.000113561,0.000138511,0.000358537,0.001677483],
[-0.000002679,0.000027608,-0.000089478,0.000091949,0.000320432,0.001442229]],
[[0.009116060,-0.107796012,0.428373591,-0.661365800,0.739095378,-0.007768132],
[-0.000519920,0.006226218,-0.025766607,0.039744436,0.283189160,0.014165743],
[-0.000519920,0.006226218,-0.025766607,0.039744436,0.273189160,0.012275811],
[-0.000519920,0.006226218,-0.025766607,0.039744436,0.353189160,0.010554788],
[-0.000519920,0.006226218,-0.025766607,0.039744436,0.383189160,0.012625458],
[0.000423795,-0.005624105,0.025162851,-0.052616912,0.607543471,0.009620477],
[0.000423795,-0.005624105,0.025162851,-0.052616912,0.747543471,0.014251323],
[0.001217706,-0.010553908,0.015929773,0.045462188,0.805217866,0.036563462],
[0.001217706,-0.010553908,0.015929773,0.045462188,1.205217866,0.038922800],
[-0.001731085,0.031471562,-0.191257578,0.442688592,1.381631440,0.061325547],
[-0.001731085,0.031471562,-0.191257578,0.442688592,1.581631440,0.068624486],
[-0.000012232,0.013235878,-0.126905442,0.353883326,1.722590621,0.068569211],
[-0.001731085,0.031471562,-0.191257578,0.442688592,1.601631440,0.064266835],
[0.001217706,-0.010553908,0.015929773,0.045462188,1.205217866,0.032173197],
[-0.000519920,0.006226218,-0.025766607,0.039744436,0.483189160,0.012261293],
[-0.000519920,0.006226218,-0.025766607,0.039744436,0.333189160,-0.000798003]]]#K/S在不同颜色，不同波长下关于颜料浓度的多项式系数
    return CC[RYB][n][0]*c**5 + CC[RYB][n][1]*c**4 + CC[RYB][n][2]*c**3 + CC[RYB][n][3]*c**2 + CC[RYB][n][4]*c + CC[RYB][n][5]

def calcuR(c1,c2,c3):#由三种染色剂浓度求R值
    KS0 = [0.039492,0.025906,0.017964,0.015092,0.011439,0.009515,0.007961,0.006947,0.006284,0.005889,0.005238,0.004948,0.004626,0.004247,0.004100,0.003617]
    KS1 = []
    KS2 = []
    KS3 = []
    for i in range(16):
        KS1.append(KS(c1,0,i))
    for i in range(16):
        KS2.append(KS(c2,1,i))
    for i in range(16):
        KS3.append(KS(c3,2,i))
    
    a = []
    for i in range(16):
        a.append(KS0[i] + c1*KS1[i] + c2*KS2[i] + c3*KS3[i])

    R = []
    for i in range(16):
        R.append(a[i]+1 - (a[i]**2 + 2*a[i])**0.5)
    return R#获得全波段

def calcuXYZ(R):#由R获得XYZ值
    lis_3 = [[0.136,0.014,0.613],
    [1.644,0.172,7.820],
    [3.463,0.560,17.755],
    [3.065,1.300,17.697],
    [0.803,2.530,7.703],
    [0.036,4.337,2.056],
    [1.062,6.870,0.548],
    [3.385,8.644,0.123],
    [6.069,8.583,0.000],
    [8.361,7.163,0.000],
    [8.707,5.100,0.000],
    [6.463,3.004,0.000],
    [3.109,1.295,0.000],
    [1.053,0.416,0.000],
    [0.275,0.107,0.000],
    [0.059,0.023,0.000]]
    X = 0
    Y = 0
    Z = 0
    for i in range(16):
        if i == 0 or i == 15:
            X += lis_3[i][0]*R[i]#R指标是波长的话要改
        else:
            X += lis_3[i][0]*2*R[i]
    
    for i in range(16):
        if i == 0 or i == 15:
            Y += lis_3[i][1]*R[i]#R指标是波长的话要改
        else:
            Y += lis_3[i][1]*2*R[i]
    
    for i in range(16):
        if i == 0 or i == 15:
            Z += lis_3[i][2]*R[i]#R指标是波长的话要改
        else:
            Z += lis_3[i][2]*2*R[i]
    
    return [X,Y,Z]

def calcuLab(XYZ):#输入XYZ列表
    X0 = 94.83
    Y0 = 100
    Z0 = 107.38
    L = 116*(XYZ[1]/Y0)**(1/3) - 16
    a = 500*((XYZ[0]/X0)**(1/3) - (XYZ[1]/Y0)**(1/3))
    b = 200*((XYZ[1]/Y0)**(1/3) - (XYZ[2]/Z0)**(1/3))
    lis = [L,a,b]
    return lis#返回L*,a*,b*列表

def calcu_delta_E(Lab1,Lab2):#由两组L*,a*,b*列表获得色差
    delta_E = 0
    for i in range(3):
        delta_E += (Lab1[i]-Lab2[i])**2
    return delta_E**0.5

def calcuprice(c1,c2,c3):
    return 0.01*(c1*2*60 + c2*2*65 + c3*2*63)

def F(c1,c2,c3,R_target,Q):#目标函数
    return calcu_delta_E(calcuLab(calcuXYZ(calcuR(c1,c2,c3))),calcuLab(calcuXYZ(R_target))) + calcuprice(c1,c2,c3)*Q

#以下为模拟退火算法求解函数优化问题
import random
import math
k = 0
lis_sol_best = [[0.40586875338896833,0.015916118540497272,0.04432800510552193],
[0.1079889286433858,3.028029619014244e-05,0.15581905846612099],
[0.19605127018610666,2.2357602251466338e-05,0.18098796521718252],
[0.00014309268924249743,0.03962821828028015,0.4302292924618222],
[6.87883483275753e-05,0.0220150074677026,0.3484044894071973],
[0.428444319092513,2.1995866696073113e-05,0.061805755191506134],
[0.3074447633566366,0.3573555296269151,0.07862051384656951],
[0.10492920025242758,0.07981259554212641,0.14868613976092473],
[0.031031329787946996,0.035943901695614344,0.3520823877367484],
[0.06863792643266634,0.23496849152490215,0.4335639853741024]]
R = [[0.507045,0.532145,0.546225,0.557051,0.493464,0.430796,0.370752,0.359875,0.365956,0.513965,0.716593,0.837977,0.888602,0.900323,0.906528,0.913298],
[0.681044,0.724153,0.749374,0.752377,0.733554,0.699726,0.663874,0.652066,0.642280,0.689994,0.720488,0.725711,0.732905,0.771153,0.838096,0.859082],
[0.629420,0.668642,0.690550,0.693808,0.654061,0.603730,0.553318,0.539833,0.534764,0.616401,0.680087,0.695650,0.705559,0.747784,0.823197,0.846680],
[0.598105,0.636542,0.647724,0.634758,0.638956,0.610761,0.589352,0.556888,0.500971,0.457357,0.439055,0.430547,0.437718,0.503085,0.646008,0.692619],
[0.641290,0.680826,0.695806,0.685813,0.690465,0.665507,0.646113,0.616788,0.565565,0.524583,0.507192,0.499046,0.506062,0.568136,0.697296,0.738285],
[0.507637,0.534544,0.550889,0.560809,0.488216,0.420199,0.357506,0.345772,0.351452,0.499036,0.703689,0.825218,0.874593,0.889770,0.901908,0.910100],
[0.376815,0.379640,0.371046,0.387641,0.401820,0.412266,0.412390,0.425963,0.439564,0.576515,0.736379,0.810591,0.836221,0.858021,0.886589,0.898088],
[0.611623,0.636383,0.644250,0.654583,0.661286,0.657130,0.645990,0.645381,0.639611,0.688578,0.719943,0.725500,0.732772,0.771024,0.837919,0.858908],
[0.616192,0.654238,0.667361,0.660191,0.663057,0.638999,0.618215,0.593015,0.547792,0.519088,0.506045,0.498777,0.505973,0.568058,0.697160,0.738137],
[0.457151,0.471454,0.465966,0.472114,0.495952,0.506516,0.517486,0.510463,0.471248,0.447707,0.436959,0.430048,0.437543,0.502925,0.645742,0.692336]]
lis_delta_E_best = [0.018876454119754943,0.683038928860927,0.7160747259044927,0.5516658249513138,0.5391506143715753,0.7213898359127621,0.032779586100359435,0.026024894392257712,0.018613054958445764,0.009960356472296485]
R_target = R[k]

LIS_Q_sol_best = []
LIS_Q_mess = []
LIS_Q = []
LIS_deltaE = []
Q = 0.2
for n in range(20):
    print(n)
    sol_new1 = 1#初始值
    sol_new2 = 1
    sol_new3 = 1
    sol_current1 = sol_new1#迭代过程中记录
    sol_current2 = sol_new2
    sol_current3 = sol_new3
    sol_best1 = sol_new1
    sol_best2 = sol_new2
    sol_best3 = sol_new3
    E_current = 99999#目标函数优化初始化
    E_best = 99999
    T = 0.5#初始温度
    T1 = 0.02#结束温度
    aa = 0.985#温度衰减率
    while T >= T1:
        print(T)
        times = 0
        #E_record = []
        while times < 1000:
            times += 1
            sol_new01 = sol_new1 + (random.random()-0.5)*0.05
            sol_new02 = sol_new2 + (random.random()-0.5)*0.05
            sol_new03 = sol_new3 + (random.random()-0.5)*0.05
            
            if 0 <= sol_new01 <= 5 and 0 <= sol_new02 <= 5 and 0 <= sol_new03 <= 5 and\
            sol_new01*sol_new02 + sol_new01*sol_new03 + sol_new02*sol_new03 > 1e-7:
                sol_new1 = sol_new01
                sol_new2 = sol_new02
                sol_new3 = sol_new03
            else:
                times -= 1
                continue
            E_new = F(sol_new1,sol_new2,sol_new3,R_target,Q)
            if E_new < E_current:
                E_current = E_new
                sol_current1 = sol_new1
                sol_current2 = sol_new2
                sol_current3 = sol_new3
                if E_new <E_best:
                    E_best = E_new
                    sol_best1 = sol_new1
                    sol_best2 = sol_new2
                    sol_best3 = sol_new3
            else:
                if random.random()<math.e**(-(E_new-E_current)/T):
                    E_current = E_new
                    sol_current1 = sol_new1
                    sol_current2 = sol_new2
                    sol_current3 = sol_new3
                else:
                    sol_new1 = sol_current1
                    sol_new2 = sol_current2
                    sol_new3 = sol_current3
            #E_record.append(E_current)
        T = T*aa
    LIS_Q_sol_best.append([sol_best1,sol_best2,sol_best3])
    LIS_deltaE.append(calcu_delta_E(calcuLab(calcuXYZ(calcuR(sol_best1,sol_best2,sol_best3))),calcuLab(calcuXYZ(R_target))))
    LIS_Q_mess.append(2*(sol_best1 + sol_best2 + sol_best3))
    LIS_Q.append(Q)
    Q *= 1.5
'''
print('sol_best: ',sol_best1,sol_best2,sol_best3)#最优解
print('E_best ',E_best)#色差
print('价格比例',calcuprice( sol_best1, sol_best2, sol_best3) / calcuprice( lis_sol_best[k][0], lis_sol_best[k][1], lis_sol_best[k][2]))
delta_E = calcu_delta_E(calcuLab(calcuXYZ(calcuR(sol_best1,sol_best2,sol_best3))),calcuLab(calcuXYZ(R_target)))
delta_E1= calcu_delta_E(calcuLab(calcuXYZ(calcuR(lis_sol_best[k][0], lis_sol_best[k][1], lis_sol_best[k][2]))),calcuLab(calcuXYZ(R_target)))
print('色差 ',delta_E)
print('色差变化比例',delta_E/delta_E1)#理论上大于1
'''
print('LIS_Q_sol_best\n',LIS_Q_sol_best)
print('LIS_Q_mess\n',LIS_Q_mess)
print('LIS_Q\n',LIS_Q)
print('LIS_deltaE',LIS_deltaE)




