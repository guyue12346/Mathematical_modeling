def KS(c,RYB,n):#n与波长线性相关，函数根据颜料浓度获得K/S值
    CC = [[[ 0.002051,-0.010625,-0.031360,0.181794,0.631014,0.612139],
[-0.012674,0.161986,-0.705964,1.160046,0.191246,0.249396],	
[-0.012674,0.161986,-0.705964,1.160046,0.162746,0.130041],	
[-0.006337,0.080993,-0.352982,0.580023,0.382851,0.164430],	
[-0.006337,0.080993,-0.352982,0.580023,0.833352,0.214509],	
[-0.006337,0.080993,-0.352982,0.580023,1.429895,0.277175],	
[-0.006337,0.080993,-0.352982,0.580023,2.229895,0.343731],	
[-0.006337,0.080993,-0.352982,0.580023,2.429895,0.319349],	
[-0.006337,0.080993,-0.352982,0.580023,2.329895,0.363999],	
[-0.005484,0.069501,-0.300351,0.488842,0.878256,0.031301],	
[-0.005610,0.068259,-0.282375,0.447774,0.027184,0.017194],	
[-0.000132,0.001688,-0.007425,0.012295,0.045176,0.008161],	
[2.0e-5,-0.000213,0.000686,-0.00058,0.009633,0.006701],	
[-2.4e-5,0.000292,-0.001249,0.002107,0.003789,0.00523],	
[-1.1e-5,0.000147,-0.00071,0.001342,0.001148,0.006499],	
[-1e-5,0.000147, - 0.000710,0.001341,0.000148,0.006200]],
[[-0.003817,0.041305,-0.151455,0.217372,1.49948,0.483956],	
[-0.003817,0.041305,-0.151455,0.217372,1.59948,0.494269],	
[-0.003817,0.041305,-0.151455,0.217372,1.79948,0.484631],	
[-0.003817,0.041305,-0.151455,0.217372,1.60948,0.4185],	
[-0.003817,0.041305,-0.151455,0.217372,1.19948,0.322496],	
[-0.002641,0.028986,-0.108313,0.158117,0.776735,0.207159],	
[-0.002641,0.028986,-0.108313,0.158117,0.326735,0.107696],	
[-0.000272,0.002981,-0.01109,0.016092,0.142663,0.047312],	
[-0.000231,0.002448,-0.008708,0.011759,0.05533,0.023342],	
[-0.000864,0.009848,-0.038713,0.062082,-0.011645,0.013055],	
[-1.8e-5,0.000177,-0.000594,0.000748,0.006688,0.00463],	
[-1E-05,0.0001,- 0.0004,0.0005,0.002,0.0024],
[-3.0e-6,3.3e-5,-0.000114,0.000139,0.000959,0.002011],
[-3E-06,3E-05,- 0.0001,0.0001,0.0006,0.0018],
[-3E-06,3E-05,- 0.0001,0.0001,0.0004,0.0017],
[-3E-06,3E-05,- 9E-05,9E-05,0.0003,0.0014]],
[[0.009116,-0.107796,0.428374,-0.661366,0.739095,-0.007768],
[-0.00052,0.006226,-0.025767,0.039744,0.283189,0.014166],
[-0.00052,0.006226,-0.025767,0.039744,0.273189,0.012276],
[-0.00052,0.006226,-0.025767,0.039744,0.353189,0.010555],
[-0.00052,0.006226,-0.025767,0.039744,0.383189,0.012625],
[0.000424,-0.005624,0.025163,-0.052617,0.607543,0.00962],
[0.000424,-0.005624,0.025163,-0.052617,0.747543,0.014251],
[0.001218,-0.010554,0.01593,0.045462,0.805218,0.036563],
[0.001218,-0.010554,0.01593,0.045462,1.205218,0.038923],
[-0.001731,0.031472,-0.191258,0.442689,1.381631,0.061326],
[-0.001731,0.031472,-0.191258,0.442689,1.581631,0.068624],
[-1.2e-5,0.013236,-0.126905,0.353883,1.722591,0.068569],
[-0.001731,0.031472,-0.191258,0.442689,1.601631,0.064267],
[0.001218,-0.010554,0.01593,0.045462,1.205218,0.032173],
[-0.00052,0.006226,-0.025767,0.039744,0.483189,0.012261],
[-0.00052,0.006226,-0.025767,0.039744,0.333189,-0.000798]]]#K/S在不同颜色，不同波长下关于颜料浓度的多项式系数
    return CC[RYB][n][0]*c**5 + CC[RYB][n][1]*c**4 + CC[RYB][n][2]*c**3 + CC[RYB][n][3]*c**2 + CC[RYB][n][4]*c + CC[RYB][n][5]

def calcuR(c1,c2,c3):#由三种染色剂浓度求R值
    KS0 = [0.039492,0.025906,0.017964,0.015092,0.011439,0.009515,0.007961,0.006947,0.006284,0.005889,0.005238,0.004948,0.004626,0.004247,0.004100,0.003617]
    KS1 = []
    KS2 = []
    KS3 = []
    for i in range(16):
        KS1.append(KS(c1,0,i))
    for i in range(16):
        KS2.append(KS(c2,1,i))
    for i in range(16):
        KS3.append(KS(c3,2,i))
    
    a = []
    for i in range(16):
        a.append(KS0[i] + c1*KS1[i] + c2*KS2[i] + c3*KS3[i])

    R = []
    for i in range(16):
        R.append(a[i]+1 - (a[i]**2 + 2*a[i])**0.5)
    return R#获得全波段

def calcuXYZ(R):#由R获得XYZ值
    lis_3 = [[0.136,0.014,0.613],
    [1.644,0.172,7.820],
    [3.463,0.560,17.755],
    [3.065,1.300,17.697],
    [0.803,2.530,7.703],
    [0.036,4.337,2.056],
    [1.062,6.870,0.548],
    [3.385,8.644,0.123],
    [6.069,8.583,0.000],
    [8.361,7.163,0.000],
    [8.707,5.100,0.000],
    [6.463,3.004,0.000],
    [3.109,1.295,0.000],
    [1.053,0.416,0.000],
    [0.275,0.107,0.000],
    [0.059,0.023,0.000]]
    X = 0
    Y = 0
    Z = 0
    for i in range(16):
        if i == 0 or i == 15:
            X += lis_3[i][0]*R[i]#R指标是波长的话要改
        else:
            X += lis_3[i][0]*2*R[i]
    
    for i in range(16):
        if i == 0 or i == 15:
            Y += lis_3[i][1]*R[i]#R指标是波长的话要改
        else:
            Y += lis_3[i][1]*2*R[i]
    
    for i in range(16):
        if i == 0 or i == 15:
            Z += lis_3[i][2]*R[i]#R指标是波长的话要改
        else:
            Z += lis_3[i][2]*2*R[i]
    
    return [X,Y,Z]

def calcuLab(XYZ):#输入XYZ列表
    X0 = 94.83
    Y0 = 100
    Z0 = 107.38
    L = 116*(XYZ[1]/Y0)**(1/3) - 16
    a = 500*((XYZ[0]/X0)**(1/3) - (XYZ[1]/Y0)**(1/3))
    b = 200*((XYZ[1]/Y0)**(1/3) - (XYZ[2]/Z0)**(1/3))
    lis = [L,a,b]
    return lis#返回L*,a*,b*列表

def calcu_delta_E(Lab1,Lab2):#由两组L*,a*,b*列表获得色差
    delta_E = 0
    for i in range(3):
        delta_E += (Lab1[i]-Lab2[i])**2
    return delta_E**0.5

def calcuprice(c1,c2,c3):
    return 0.01*(c1*2*60 + c2*2*65 + c3*2*63)

def F(c1,c2,c3,R_target):
    return calcu_delta_E(calcuLab(calcuXYZ(calcuR(c1,c2,c3))),calcuLab(calcuXYZ(R_target)))

#以下为模拟退火算法求解函数优化问题
import random
import math
k = 0
R = [[0.507045,0.532145,0.546225,0.557051,0.493464,0.430796,0.370752,0.359875,0.365956,0.513965,0.716593,0.837977,0.888602,0.900323,0.906528,0.913298],
[0.681044,0.724153,0.749374,0.752377,0.733554,0.699726,0.663874,0.652066,0.642280,0.689994,0.720488,0.725711,0.732905,0.771153,0.838096,0.859082],
[0.629420,0.668642,0.690550,0.693808,0.654061,0.603730,0.553318,0.539833,0.534764,0.616401,0.680087,0.695650,0.705559,0.747784,0.823197,0.846680],
[0.598105,0.636542,0.647724,0.634758,0.638956,0.610761,0.589352,0.556888,0.500971,0.457357,0.439055,0.430547,0.437718,0.503085,0.646008,0.692619],
[0.641290,0.680826,0.695806,0.685813,0.690465,0.665507,0.646113,0.616788,0.565565,0.524583,0.507192,0.499046,0.506062,0.568136,0.697296,0.738285],
[0.507637,0.534544,0.550889,0.560809,0.488216,0.420199,0.357506,0.345772,0.351452,0.499036,0.703689,0.825218,0.874593,0.889770,0.901908,0.910100],
[0.376815,0.379640,0.371046,0.387641,0.401820,0.412266,0.412390,0.425963,0.439564,0.576515,0.736379,0.810591,0.836221,0.858021,0.886589,0.898088],
[0.611623,0.636383,0.644250,0.654583,0.661286,0.657130,0.645990,0.645381,0.639611,0.688578,0.719943,0.725500,0.732772,0.771024,0.837919,0.858908],
[0.616192,0.654238,0.667361,0.660191,0.663057,0.638999,0.618215,0.593015,0.547792,0.519088,0.506045,0.498777,0.505973,0.568058,0.697160,0.738137],
[0.457151,0.471454,0.465966,0.472114,0.495952,0.506516,0.517486,0.510463,0.471248,0.447707,0.436959,0.430048,0.437543,0.502925,0.645742,0.692336]]
R_target = R[k]
sol_new1 = 2.5#初始值
sol_new2 = 2.5
sol_new3 = 2.5
sol_current1 = sol_new1#迭代过程中记录
sol_current2 = sol_new2
sol_current3 = sol_new3
sol_best1 = sol_new1
sol_best2 = sol_new2
sol_best3 = sol_new3
E_current = 999999#目标函数优化初始化
E_best = 999999
T = 0.5#初始温度
T1 = 0.1#结束温度
aa = 0.99#温度衰减率
lis_delta_E_best = [0.018876454119754943,0.683038928860927,0.7160747259044927,0.5516658249513138,0.5391506143715753,0.7213898359127621,0.032779586100359435,0.026024894392257712,0.018613054958445764,0.009960356472296485]

while T >= T1:
    times = 0
    E_record = []
    while times < 1000:
        times += 1
        sol_new01 = sol_new1 + (random.random()-0.5)*0.05
        sol_new02 = sol_new2 + (random.random()-0.5)*0.05
        sol_new03 = sol_new3 + (random.random()-0.5)*0.05
        
        if 0 <= sol_new01 <= 5 and 0 <= sol_new02 <= 5 and 0 <= sol_new03 <= 5 and\
        sol_new01*sol_new02 + sol_new01*sol_new03 + sol_new02*sol_new03 > 1e-7 and\
        F(sol_new1,sol_new2,sol_new3,R_target) < lis_delta_E_best[k] + 0.1:#0.1的色差偏离容许度
            sol_new1 = sol_new01
            sol_new2 = sol_new02
            sol_new3 = sol_new03
        else:
            times -= 1
            continue
        E_new = calcuprice(sol_new1,sol_new2,sol_new3)
        if E_new < E_current:
            E_current = E_new
            sol_current1 = sol_new1
            sol_current2 = sol_new2
            sol_current3 = sol_new3
            if E_new <E_best:
                E_best = E_new
                sol_best1 = sol_new1
                sol_best2 = sol_new2
                sol_best3 = sol_new3
        else:
            if random.random()<math.e**(-(E_new-E_current)/T):
                E_current = E_new
                sol_current1 = sol_new1
                sol_current2 = sol_new2
                sol_current3 = sol_new3
            else:
                sol_new1 = sol_current1
                sol_new2 = sol_current2
                sol_new3 = sol_current3
        E_record.append(E_current)
    T = T*aa
print('sol_best: ',sol_best1,sol_best2,sol_best3)#最优解
print('E_best ',E_best)#目标函数优化值

lis_sol_best = [[0.40586875338896833,0.015916118540497272,0.04432800510552193],
[0.1079889286433858,3.028029619014244e-05,0.15581905846612099],
[0.19605127018610666,2.2357602251466338e-05,0.18098796521718252],
[0.00014309268924249743,0.03962821828028015,0.4302292924618222],
[6.87883483275753e-05,0.0220150074677026,0.3484044894071973],
[0.428444319092513,2.1995866696073113e-05,0.061805755191506134],
[0.3074447633566366,0.3573555296269151,0.07862051384656951],
[0.10492920025242758,0.07981259554212641,0.14868613976092473],
[0.031031329787946996,0.035943901695614344,0.3520823877367484],
[0.06863792643266634,0.23496849152490215,0.4335639853741024]]
delta_E = calcu_delta_E(calcuLab(calcuXYZ(calcuR(sol_best1,sol_best2,sol_best3))),calcuLab(calcuXYZ(R_target)))
delta_E1= calcu_delta_E(calcuLab(calcuXYZ(calcuR(lis_sol_best[k][0], lis_sol_best[k][1], lis_sol_best[k][2]))),calcuLab(calcuXYZ(R_target)))
print('色差 ',delta_E)
print('色差变化',delta_E1 - delta_E)
print('价格差 ',calcuprice( lis_sol_best[k][0], lis_sol_best[k][1], lis_sol_best[k][2]) - calcuprice( sol_best1, sol_best2, sol_best3))